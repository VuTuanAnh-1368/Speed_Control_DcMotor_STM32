
ControlDcMotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000047c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000588  08000588  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000588  08000588  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000588  08000588  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000588  08000588  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000588  08000588  00001588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800058c  0800058c  0000158c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000590  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000594  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000594  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000efe  00000000  00000000  0000202d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004fa  00000000  00000000  00002f2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f8  00000000  00000000  00003428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000164  00000000  00000000  00003620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015271  00000000  00000000  00003784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000021d2  00000000  00000000  000189f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b1dc  00000000  00000000  0001abc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00095da3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000614  00000000  00000000  00095de8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  000963fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08000570 	.word	0x08000570

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08000570 	.word	0x08000570

0800014c <main>:
void Motor_Stop(void);
void Motor_SetSpeed(uint16_t speed);
void Motor_Forward(void);
void Motor_Backward(void);

int main(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b08a      	sub	sp, #40	@ 0x28
 8000150:	af00      	add	r7, sp, #0

  SystemClock_Config();
 8000152:	f000 f979 	bl	8000448 <SystemClock_Config>
  input1();
 8000156:	f000 f89b 	bl	8000290 <input1>
  input2();
 800015a:	f000 f8b5 	bl	80002c8 <input2>
  pwm_Init();
 800015e:	f000 f8cf 	bl	8000300 <pwm_Init>

  while (1) {
      Motor_Forward();
 8000162:	f000 f951 	bl	8000408 <Motor_Forward>
      Motor_Start();
 8000166:	f000 f90b 	bl	8000380 <Motor_Start>
      for (uint16_t speed = 0; speed <= 100; speed += 5) {
 800016a:	2300      	movs	r3, #0
 800016c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800016e:	e010      	b.n	8000192 <main+0x46>
          Motor_SetSpeed(speed);
 8000170:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000172:	4618      	mov	r0, r3
 8000174:	f000 f926 	bl	80003c4 <Motor_SetSpeed>
          for (volatile int i = 0; i < 100000; i++);
 8000178:	2300      	movs	r3, #0
 800017a:	61fb      	str	r3, [r7, #28]
 800017c:	e002      	b.n	8000184 <main+0x38>
 800017e:	69fb      	ldr	r3, [r7, #28]
 8000180:	3301      	adds	r3, #1
 8000182:	61fb      	str	r3, [r7, #28]
 8000184:	69fb      	ldr	r3, [r7, #28]
 8000186:	4a3e      	ldr	r2, [pc, #248]	@ (8000280 <main+0x134>)
 8000188:	4293      	cmp	r3, r2
 800018a:	ddf8      	ble.n	800017e <main+0x32>
      for (uint16_t speed = 0; speed <= 100; speed += 5) {
 800018c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800018e:	3305      	adds	r3, #5
 8000190:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000192:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000194:	2b64      	cmp	r3, #100	@ 0x64
 8000196:	d9eb      	bls.n	8000170 <main+0x24>
      }
      for (volatile int i = 0; i < 500000; i++);
 8000198:	2300      	movs	r3, #0
 800019a:	61bb      	str	r3, [r7, #24]
 800019c:	e002      	b.n	80001a4 <main+0x58>
 800019e:	69bb      	ldr	r3, [r7, #24]
 80001a0:	3301      	adds	r3, #1
 80001a2:	61bb      	str	r3, [r7, #24]
 80001a4:	69bb      	ldr	r3, [r7, #24]
 80001a6:	4a37      	ldr	r2, [pc, #220]	@ (8000284 <main+0x138>)
 80001a8:	4293      	cmp	r3, r2
 80001aa:	ddf8      	ble.n	800019e <main+0x52>

      Motor_Backward();
 80001ac:	f000 f93c 	bl	8000428 <Motor_Backward>
      for (uint16_t speed = 100; speed > 0; speed -= 5) {
 80001b0:	2364      	movs	r3, #100	@ 0x64
 80001b2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80001b4:	e010      	b.n	80001d8 <main+0x8c>
          Motor_SetSpeed(speed);
 80001b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80001b8:	4618      	mov	r0, r3
 80001ba:	f000 f903 	bl	80003c4 <Motor_SetSpeed>
          for (volatile int i = 0; i < 100000; i++);
 80001be:	2300      	movs	r3, #0
 80001c0:	617b      	str	r3, [r7, #20]
 80001c2:	e002      	b.n	80001ca <main+0x7e>
 80001c4:	697b      	ldr	r3, [r7, #20]
 80001c6:	3301      	adds	r3, #1
 80001c8:	617b      	str	r3, [r7, #20]
 80001ca:	697b      	ldr	r3, [r7, #20]
 80001cc:	4a2c      	ldr	r2, [pc, #176]	@ (8000280 <main+0x134>)
 80001ce:	4293      	cmp	r3, r2
 80001d0:	ddf8      	ble.n	80001c4 <main+0x78>
      for (uint16_t speed = 100; speed > 0; speed -= 5) {
 80001d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80001d4:	3b05      	subs	r3, #5
 80001d6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80001d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d1eb      	bne.n	80001b6 <main+0x6a>
      }
      for (volatile int i = 0; i < 500000; i++);
 80001de:	2300      	movs	r3, #0
 80001e0:	613b      	str	r3, [r7, #16]
 80001e2:	e002      	b.n	80001ea <main+0x9e>
 80001e4:	693b      	ldr	r3, [r7, #16]
 80001e6:	3301      	adds	r3, #1
 80001e8:	613b      	str	r3, [r7, #16]
 80001ea:	693b      	ldr	r3, [r7, #16]
 80001ec:	4a25      	ldr	r2, [pc, #148]	@ (8000284 <main+0x138>)
 80001ee:	4293      	cmp	r3, r2
 80001f0:	ddf8      	ble.n	80001e4 <main+0x98>

      Motor_Backward();
 80001f2:	f000 f919 	bl	8000428 <Motor_Backward>
      for (uint16_t speed = 0; speed <= 100; speed += 5) {
 80001f6:	2300      	movs	r3, #0
 80001f8:	847b      	strh	r3, [r7, #34]	@ 0x22
 80001fa:	e010      	b.n	800021e <main+0xd2>
    	  Motor_SetSpeed(speed);
 80001fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80001fe:	4618      	mov	r0, r3
 8000200:	f000 f8e0 	bl	80003c4 <Motor_SetSpeed>
    	  for (volatile int i = 0; i < 100000; i++);
 8000204:	2300      	movs	r3, #0
 8000206:	60fb      	str	r3, [r7, #12]
 8000208:	e002      	b.n	8000210 <main+0xc4>
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	3301      	adds	r3, #1
 800020e:	60fb      	str	r3, [r7, #12]
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	4a1b      	ldr	r2, [pc, #108]	@ (8000280 <main+0x134>)
 8000214:	4293      	cmp	r3, r2
 8000216:	ddf8      	ble.n	800020a <main+0xbe>
      for (uint16_t speed = 0; speed <= 100; speed += 5) {
 8000218:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800021a:	3305      	adds	r3, #5
 800021c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800021e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000220:	2b64      	cmp	r3, #100	@ 0x64
 8000222:	d9eb      	bls.n	80001fc <main+0xb0>
      }

      Motor_Stop();
 8000224:	f000 f8ba 	bl	800039c <Motor_Stop>
      for (volatile int i = 0; i < 1000000; i++);
 8000228:	2300      	movs	r3, #0
 800022a:	60bb      	str	r3, [r7, #8]
 800022c:	e002      	b.n	8000234 <main+0xe8>
 800022e:	68bb      	ldr	r3, [r7, #8]
 8000230:	3301      	adds	r3, #1
 8000232:	60bb      	str	r3, [r7, #8]
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	4a14      	ldr	r2, [pc, #80]	@ (8000288 <main+0x13c>)
 8000238:	4293      	cmp	r3, r2
 800023a:	ddf8      	ble.n	800022e <main+0xe2>

      Motor_Forward();
 800023c:	f000 f8e4 	bl	8000408 <Motor_Forward>
      Motor_Start();
 8000240:	f000 f89e 	bl	8000380 <Motor_Start>
      Motor_SetSpeed(5);
 8000244:	2005      	movs	r0, #5
 8000246:	f000 f8bd 	bl	80003c4 <Motor_SetSpeed>
      for (volatile int i = 0; i < 10000000; i++);
 800024a:	2300      	movs	r3, #0
 800024c:	607b      	str	r3, [r7, #4]
 800024e:	e002      	b.n	8000256 <main+0x10a>
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	3301      	adds	r3, #1
 8000254:	607b      	str	r3, [r7, #4]
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	4a0c      	ldr	r2, [pc, #48]	@ (800028c <main+0x140>)
 800025a:	4293      	cmp	r3, r2
 800025c:	dbf8      	blt.n	8000250 <main+0x104>

      Motor_Backward();
 800025e:	f000 f8e3 	bl	8000428 <Motor_Backward>
      Motor_SetSpeed(5);
 8000262:	2005      	movs	r0, #5
 8000264:	f000 f8ae 	bl	80003c4 <Motor_SetSpeed>
      for (volatile int i = 0; i < 10000000; i++);
 8000268:	2300      	movs	r3, #0
 800026a:	603b      	str	r3, [r7, #0]
 800026c:	e002      	b.n	8000274 <main+0x128>
 800026e:	683b      	ldr	r3, [r7, #0]
 8000270:	3301      	adds	r3, #1
 8000272:	603b      	str	r3, [r7, #0]
 8000274:	683b      	ldr	r3, [r7, #0]
 8000276:	4a05      	ldr	r2, [pc, #20]	@ (800028c <main+0x140>)
 8000278:	4293      	cmp	r3, r2
 800027a:	dbf8      	blt.n	800026e <main+0x122>
      Motor_Forward();
 800027c:	e771      	b.n	8000162 <main+0x16>
 800027e:	bf00      	nop
 8000280:	0001869f 	.word	0x0001869f
 8000284:	0007a11f 	.word	0x0007a11f
 8000288:	000f423f 	.word	0x000f423f
 800028c:	00989680 	.word	0x00989680

08000290 <input1>:
  }
}

void input1() {
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000294:	4b0a      	ldr	r3, [pc, #40]	@ (80002c0 <input1+0x30>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	4a09      	ldr	r2, [pc, #36]	@ (80002c0 <input1+0x30>)
 800029a:	f043 0304 	orr.w	r3, r3, #4
 800029e:	6193      	str	r3, [r2, #24]
	GPIOA->CRL &= ~(GPIO_CRL_CNF3 | GPIO_CRL_MODE3);
 80002a0:	4b08      	ldr	r3, [pc, #32]	@ (80002c4 <input1+0x34>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a07      	ldr	r2, [pc, #28]	@ (80002c4 <input1+0x34>)
 80002a6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80002aa:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_MODE3_0;
 80002ac:	4b05      	ldr	r3, [pc, #20]	@ (80002c4 <input1+0x34>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a04      	ldr	r2, [pc, #16]	@ (80002c4 <input1+0x34>)
 80002b2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80002b6:	6013      	str	r3, [r2, #0]
}
 80002b8:	bf00      	nop
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bc80      	pop	{r7}
 80002be:	4770      	bx	lr
 80002c0:	40021000 	.word	0x40021000
 80002c4:	40010800 	.word	0x40010800

080002c8 <input2>:

void input2() {
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 80002cc:	4b0a      	ldr	r3, [pc, #40]	@ (80002f8 <input2+0x30>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	4a09      	ldr	r2, [pc, #36]	@ (80002f8 <input2+0x30>)
 80002d2:	f043 0304 	orr.w	r3, r3, #4
 80002d6:	6193      	str	r3, [r2, #24]
	GPIOA->CRL &= ~(GPIO_CRL_CNF4 | GPIO_CRL_MODE4);
 80002d8:	4b08      	ldr	r3, [pc, #32]	@ (80002fc <input2+0x34>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a07      	ldr	r2, [pc, #28]	@ (80002fc <input2+0x34>)
 80002de:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 80002e2:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_MODE4_0;
 80002e4:	4b05      	ldr	r3, [pc, #20]	@ (80002fc <input2+0x34>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a04      	ldr	r2, [pc, #16]	@ (80002fc <input2+0x34>)
 80002ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80002ee:	6013      	str	r3, [r2, #0]
}
 80002f0:	bf00      	nop
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bc80      	pop	{r7}
 80002f6:	4770      	bx	lr
 80002f8:	40021000 	.word	0x40021000
 80002fc:	40010800 	.word	0x40010800

08000300 <pwm_Init>:

void pwm_Init() {
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_TIM1EN;;
 8000304:	4b1b      	ldr	r3, [pc, #108]	@ (8000374 <pwm_Init+0x74>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	4a1a      	ldr	r2, [pc, #104]	@ (8000374 <pwm_Init+0x74>)
 800030a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800030e:	f043 0304 	orr.w	r3, r3, #4
 8000312:	6193      	str	r3, [r2, #24]
    GPIOA->CRH &= ~(GPIO_CRH_CNF8 | GPIO_CRH_MODE8);
 8000314:	4b18      	ldr	r3, [pc, #96]	@ (8000378 <pwm_Init+0x78>)
 8000316:	685b      	ldr	r3, [r3, #4]
 8000318:	4a17      	ldr	r2, [pc, #92]	@ (8000378 <pwm_Init+0x78>)
 800031a:	f023 030f 	bic.w	r3, r3, #15
 800031e:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= GPIO_CRH_CNF8_1 | GPIO_CRH_MODE8;
 8000320:	4b15      	ldr	r3, [pc, #84]	@ (8000378 <pwm_Init+0x78>)
 8000322:	685b      	ldr	r3, [r3, #4]
 8000324:	4a14      	ldr	r2, [pc, #80]	@ (8000378 <pwm_Init+0x78>)
 8000326:	f043 030b 	orr.w	r3, r3, #11
 800032a:	6053      	str	r3, [r2, #4]
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 800032c:	4b11      	ldr	r3, [pc, #68]	@ (8000374 <pwm_Init+0x74>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	4a10      	ldr	r2, [pc, #64]	@ (8000374 <pwm_Init+0x74>)
 8000332:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000336:	6193      	str	r3, [r2, #24]
	TIM1->CR1 = 0;
 8000338:	4b10      	ldr	r3, [pc, #64]	@ (800037c <pwm_Init+0x7c>)
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
	TIM1->PSC = 6399;
 800033e:	4b0f      	ldr	r3, [pc, #60]	@ (800037c <pwm_Init+0x7c>)
 8000340:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 8000344:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM1->ARR = 99;
 8000346:	4b0d      	ldr	r3, [pc, #52]	@ (800037c <pwm_Init+0x7c>)
 8000348:	2263      	movs	r2, #99	@ 0x63
 800034a:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM1->CCMR1 = TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 800034c:	4b0b      	ldr	r3, [pc, #44]	@ (800037c <pwm_Init+0x7c>)
 800034e:	2260      	movs	r2, #96	@ 0x60
 8000350:	619a      	str	r2, [r3, #24]
	TIM1->CCER = TIM_CCER_CC1E;
 8000352:	4b0a      	ldr	r3, [pc, #40]	@ (800037c <pwm_Init+0x7c>)
 8000354:	2201      	movs	r2, #1
 8000356:	621a      	str	r2, [r3, #32]
	TIM1->BDTR = TIM_BDTR_MOE;
 8000358:	4b08      	ldr	r3, [pc, #32]	@ (800037c <pwm_Init+0x7c>)
 800035a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800035e:	645a      	str	r2, [r3, #68]	@ 0x44
	TIM1->CR1 |= TIM_CR1_CEN;
 8000360:	4b06      	ldr	r3, [pc, #24]	@ (800037c <pwm_Init+0x7c>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a05      	ldr	r2, [pc, #20]	@ (800037c <pwm_Init+0x7c>)
 8000366:	f043 0301 	orr.w	r3, r3, #1
 800036a:	6013      	str	r3, [r2, #0]
}
 800036c:	bf00      	nop
 800036e:	46bd      	mov	sp, r7
 8000370:	bc80      	pop	{r7}
 8000372:	4770      	bx	lr
 8000374:	40021000 	.word	0x40021000
 8000378:	40010800 	.word	0x40010800
 800037c:	40012c00 	.word	0x40012c00

08000380 <Motor_Start>:

void Motor_Start(void) {
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
    TIM1->CR1 |= TIM_CR1_CEN;
 8000384:	4b04      	ldr	r3, [pc, #16]	@ (8000398 <Motor_Start+0x18>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a03      	ldr	r2, [pc, #12]	@ (8000398 <Motor_Start+0x18>)
 800038a:	f043 0301 	orr.w	r3, r3, #1
 800038e:	6013      	str	r3, [r2, #0]
}
 8000390:	bf00      	nop
 8000392:	46bd      	mov	sp, r7
 8000394:	bc80      	pop	{r7}
 8000396:	4770      	bx	lr
 8000398:	40012c00 	.word	0x40012c00

0800039c <Motor_Stop>:

void Motor_Stop(void) {
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
    TIM1->CR1 &= ~TIM_CR1_CEN;
 80003a0:	4b06      	ldr	r3, [pc, #24]	@ (80003bc <Motor_Stop+0x20>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a05      	ldr	r2, [pc, #20]	@ (80003bc <Motor_Stop+0x20>)
 80003a6:	f023 0301 	bic.w	r3, r3, #1
 80003aa:	6013      	str	r3, [r2, #0]
    GPIOA->BSRR = (1 << 20) | (1 << 19);
 80003ac:	4b04      	ldr	r3, [pc, #16]	@ (80003c0 <Motor_Stop+0x24>)
 80003ae:	f44f 12c0 	mov.w	r2, #1572864	@ 0x180000
 80003b2:	611a      	str	r2, [r3, #16]
}
 80003b4:	bf00      	nop
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bc80      	pop	{r7}
 80003ba:	4770      	bx	lr
 80003bc:	40012c00 	.word	0x40012c00
 80003c0:	40010800 	.word	0x40010800

080003c4 <Motor_SetSpeed>:

void Motor_SetSpeed(uint16_t speed) {
 80003c4:	b480      	push	{r7}
 80003c6:	b085      	sub	sp, #20
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	4603      	mov	r3, r0
 80003cc:	80fb      	strh	r3, [r7, #6]
    if (speed > 100) speed = 100;
 80003ce:	88fb      	ldrh	r3, [r7, #6]
 80003d0:	2b64      	cmp	r3, #100	@ 0x64
 80003d2:	d901      	bls.n	80003d8 <Motor_SetSpeed+0x14>
 80003d4:	2364      	movs	r3, #100	@ 0x64
 80003d6:	80fb      	strh	r3, [r7, #6]
    uint32_t pulse = speed * (TIM1->ARR + 1) / 100;
 80003d8:	88fb      	ldrh	r3, [r7, #6]
 80003da:	4a09      	ldr	r2, [pc, #36]	@ (8000400 <Motor_SetSpeed+0x3c>)
 80003dc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80003de:	3201      	adds	r2, #1
 80003e0:	fb02 f303 	mul.w	r3, r2, r3
 80003e4:	4a07      	ldr	r2, [pc, #28]	@ (8000404 <Motor_SetSpeed+0x40>)
 80003e6:	fba2 2303 	umull	r2, r3, r2, r3
 80003ea:	095b      	lsrs	r3, r3, #5
 80003ec:	60fb      	str	r3, [r7, #12]
    TIM1->CCR1 = pulse;
 80003ee:	4a04      	ldr	r2, [pc, #16]	@ (8000400 <Motor_SetSpeed+0x3c>)
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	6353      	str	r3, [r2, #52]	@ 0x34
}
 80003f4:	bf00      	nop
 80003f6:	3714      	adds	r7, #20
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bc80      	pop	{r7}
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	40012c00 	.word	0x40012c00
 8000404:	51eb851f 	.word	0x51eb851f

08000408 <Motor_Forward>:

void Motor_Forward(void) {
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
    GPIOA->BSRR = (1 << 3);
 800040c:	4b05      	ldr	r3, [pc, #20]	@ (8000424 <Motor_Forward+0x1c>)
 800040e:	2208      	movs	r2, #8
 8000410:	611a      	str	r2, [r3, #16]
    GPIOA->BSRR = (1 << 20);
 8000412:	4b04      	ldr	r3, [pc, #16]	@ (8000424 <Motor_Forward+0x1c>)
 8000414:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000418:	611a      	str	r2, [r3, #16]
}
 800041a:	bf00      	nop
 800041c:	46bd      	mov	sp, r7
 800041e:	bc80      	pop	{r7}
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	40010800 	.word	0x40010800

08000428 <Motor_Backward>:

void Motor_Backward(void) {
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
    GPIOA->BSRR = (1 << 4);
 800042c:	4b05      	ldr	r3, [pc, #20]	@ (8000444 <Motor_Backward+0x1c>)
 800042e:	2210      	movs	r2, #16
 8000430:	611a      	str	r2, [r3, #16]
    GPIOA->BSRR = (1 << 19);
 8000432:	4b04      	ldr	r3, [pc, #16]	@ (8000444 <Motor_Backward+0x1c>)
 8000434:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000438:	611a      	str	r2, [r3, #16]
}
 800043a:	bf00      	nop
 800043c:	46bd      	mov	sp, r7
 800043e:	bc80      	pop	{r7}
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	40010800 	.word	0x40010800

08000448 <SystemClock_Config>:
void SystemClock_Config(void) {
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0

}
 800044c:	bf00      	nop
 800044e:	46bd      	mov	sp, r7
 8000450:	bc80      	pop	{r7}
 8000452:	4770      	bx	lr

08000454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000458:	bf00      	nop
 800045a:	e7fd      	b.n	8000458 <NMI_Handler+0x4>

0800045c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000460:	bf00      	nop
 8000462:	e7fd      	b.n	8000460 <HardFault_Handler+0x4>

08000464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000468:	bf00      	nop
 800046a:	e7fd      	b.n	8000468 <MemManage_Handler+0x4>

0800046c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000470:	bf00      	nop
 8000472:	e7fd      	b.n	8000470 <BusFault_Handler+0x4>

08000474 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000478:	bf00      	nop
 800047a:	e7fd      	b.n	8000478 <UsageFault_Handler+0x4>

0800047c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr

08000488 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800048c:	bf00      	nop
 800048e:	46bd      	mov	sp, r7
 8000490:	bc80      	pop	{r7}
 8000492:	4770      	bx	lr

08000494 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000498:	bf00      	nop
 800049a:	46bd      	mov	sp, r7
 800049c:	bc80      	pop	{r7}
 800049e:	4770      	bx	lr

080004a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004a4:	f000 f82e 	bl	8000504 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004a8:	bf00      	nop
 80004aa:	bd80      	pop	{r7, pc}

080004ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004b0:	bf00      	nop
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr

080004b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004b8:	f7ff fff8 	bl	80004ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004bc:	480b      	ldr	r0, [pc, #44]	@ (80004ec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80004be:	490c      	ldr	r1, [pc, #48]	@ (80004f0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80004c0:	4a0c      	ldr	r2, [pc, #48]	@ (80004f4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80004c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004c4:	e002      	b.n	80004cc <LoopCopyDataInit>

080004c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ca:	3304      	adds	r3, #4

080004cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004d0:	d3f9      	bcc.n	80004c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004d2:	4a09      	ldr	r2, [pc, #36]	@ (80004f8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80004d4:	4c09      	ldr	r4, [pc, #36]	@ (80004fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004d8:	e001      	b.n	80004de <LoopFillZerobss>

080004da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004dc:	3204      	adds	r2, #4

080004de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004e0:	d3fb      	bcc.n	80004da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004e2:	f000 f821 	bl	8000528 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004e6:	f7ff fe31 	bl	800014c <main>
  bx lr
 80004ea:	4770      	bx	lr
  ldr r0, =_sdata
 80004ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004f0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80004f4:	08000590 	.word	0x08000590
  ldr r2, =_sbss
 80004f8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80004fc:	20000024 	.word	0x20000024

08000500 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000500:	e7fe      	b.n	8000500 <ADC1_2_IRQHandler>
	...

08000504 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000508:	4b05      	ldr	r3, [pc, #20]	@ (8000520 <HAL_IncTick+0x1c>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	461a      	mov	r2, r3
 800050e:	4b05      	ldr	r3, [pc, #20]	@ (8000524 <HAL_IncTick+0x20>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4413      	add	r3, r2
 8000514:	4a03      	ldr	r2, [pc, #12]	@ (8000524 <HAL_IncTick+0x20>)
 8000516:	6013      	str	r3, [r2, #0]
}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr
 8000520:	20000000 	.word	0x20000000
 8000524:	20000020 	.word	0x20000020

08000528 <__libc_init_array>:
 8000528:	b570      	push	{r4, r5, r6, lr}
 800052a:	2600      	movs	r6, #0
 800052c:	4d0c      	ldr	r5, [pc, #48]	@ (8000560 <__libc_init_array+0x38>)
 800052e:	4c0d      	ldr	r4, [pc, #52]	@ (8000564 <__libc_init_array+0x3c>)
 8000530:	1b64      	subs	r4, r4, r5
 8000532:	10a4      	asrs	r4, r4, #2
 8000534:	42a6      	cmp	r6, r4
 8000536:	d109      	bne.n	800054c <__libc_init_array+0x24>
 8000538:	f000 f81a 	bl	8000570 <_init>
 800053c:	2600      	movs	r6, #0
 800053e:	4d0a      	ldr	r5, [pc, #40]	@ (8000568 <__libc_init_array+0x40>)
 8000540:	4c0a      	ldr	r4, [pc, #40]	@ (800056c <__libc_init_array+0x44>)
 8000542:	1b64      	subs	r4, r4, r5
 8000544:	10a4      	asrs	r4, r4, #2
 8000546:	42a6      	cmp	r6, r4
 8000548:	d105      	bne.n	8000556 <__libc_init_array+0x2e>
 800054a:	bd70      	pop	{r4, r5, r6, pc}
 800054c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000550:	4798      	blx	r3
 8000552:	3601      	adds	r6, #1
 8000554:	e7ee      	b.n	8000534 <__libc_init_array+0xc>
 8000556:	f855 3b04 	ldr.w	r3, [r5], #4
 800055a:	4798      	blx	r3
 800055c:	3601      	adds	r6, #1
 800055e:	e7f2      	b.n	8000546 <__libc_init_array+0x1e>
 8000560:	08000588 	.word	0x08000588
 8000564:	08000588 	.word	0x08000588
 8000568:	08000588 	.word	0x08000588
 800056c:	0800058c 	.word	0x0800058c

08000570 <_init>:
 8000570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000572:	bf00      	nop
 8000574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000576:	bc08      	pop	{r3}
 8000578:	469e      	mov	lr, r3
 800057a:	4770      	bx	lr

0800057c <_fini>:
 800057c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800057e:	bf00      	nop
 8000580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000582:	bc08      	pop	{r3}
 8000584:	469e      	mov	lr, r3
 8000586:	4770      	bx	lr
